{{- if .Values.jobs.bad.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Values.jobs.bad.name }}
  namespace: {{ .Values.namespace }}
spec:
  template:
    spec:
      serviceAccountName: {{ .Values.serviceAccount.name }}
      {{- if .Values.jobs.bad.waitForGoodJob }}
      initContainers:
      # Wait for the "good" job to complete successfully before proceeding
      - name: wait-for-good-job
        image: {{ .Values.images.cliTool }}
        command:
          - /bin/sh
          - -c
          - |
            echo "Waiting for good job to complete successfully..."
            while true; do
              # Check if the good job exists and completed successfully
              JOB_STATUS=$(oc get job {{ .Values.jobs.good.name }} -o jsonpath='{.status.conditions[?(@.type=="Complete")].status}' --ignore-not-found)
              if [ "$JOB_STATUS" = "True" ]; then
                echo "Good job completed successfully. Proceeding with bad ref..."
                break
              fi
              
              # Check if the good job failed
              FAILED_STATUS=$(oc get job {{ .Values.jobs.good.name }} -o jsonpath='{.status.conditions[?(@.type=="Failed")].status}' --ignore-not-found)
              if [ "$FAILED_STATUS" = "True" ]; then
                echo "Good job failed. Aborting bad job..."
                exit 1
              fi
              
              echo "Good job still running or not found. Waiting 10 seconds..."
              sleep 10
            done
      {{- end }}
      containers:
      - name: kubectl-runner
        image: {{ .Values.images.cliTool }}
        command:
          - /bin/sh
          - -c
          - |
            # This 'here document' passes the PipelineRun YAML directly to oc.
            # It tells Tekton to start a new run of the '{{ .Values.pipeline.name }}' pipeline with BAD ref.
            oc create -f - <<EOF
            apiVersion: tekton.dev/v1
            kind: PipelineRun
            metadata:
              # generateName creates a unique name for each run (e.g., java-app-build-run-bad-abc12).
              generateName: java-app-build-run-bad-
              namespace: {{ .Values.namespace }}
            spec:
              taskRunTemplate:
                serviceAccountName: {{ .Values.serviceAccount.name }}
              pipelineRef:
                # This must match the name of your existing Tekton Pipeline.
                name: {{ .Values.pipeline.name }}
              # Parameters for the pipeline - using "bad" git revision
              params:
                - name: IMAGE_NAME
                  value: "{{ .Values.registry }}/{{ .Values.namespace }}/{{ .Values.application_name }}"
                - name: GIT_REPO
                  value: "{{ .Values.git_url }}"
                - name: GIT_REVISION
                  value: "{{ .Values.git_revision_bad }}"
                - name: SUBDIRECTORY
                  value: "{{ .Values.git_subdirectory }}"
              # Required workspace for the pipeline
              workspaces:
                - name: {{ .Values.workspace.name }}
                  volumeClaimTemplate:
                    spec:
                      accessModes:
                        - ReadWriteOnce
                      resources:
                        requests:
                          storage: {{ .Values.workspace.storage }}
            EOF
      restartPolicy: OnFailure
{{- end }} 